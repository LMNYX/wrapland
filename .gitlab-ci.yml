stages:
  - Compliance 1
  - Build
  - Compliance 2
  - Test
  - Integration

variables:
  IMAGE_BASE: ${CI_REGISTRY}/kwinft/ci-images/archlinux/base:latest

workflow:
  rules:
    - when: always

include:
  - project: kwinft/tooling
    ref: master
    file:
      - '/analysis/gitlab-ci/static.yml'
      - '/analysis/gitlab-ci/tests.yml'
      - '/docs/gitlab-ci/commits.yml'


Message lint:
  extends: .message-lint
  stage: Compliance 1

clang-format:
  extends: .clang-format
  stage: Compliance 1
  image: ${IMAGE_BASE}


Coverity Scan:
  extends: .coverity-scan
  stage: Build
  image: ${IMAGE_BASE}


.common-build: &common-build
  stage: Build
  image: ${IMAGE_BASE}
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - when: on_success
  artifacts:
    paths:
      - build
    expire_in: 1 week

Coverage build:
  <<: *common-build
  script:
    - pacman -Sy extra-cmake-modules --noconfirm --needed
    - mkdir build && cd build
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_EXE_LINKER_FLAGS=--coverage
      -DCMAKE_INSTALL_PREFIX:PATH=/usr ../
    - make -j$(nproc)
    - make install -j$(nproc)

Sanitizers build:
  <<: *common-build
  script:
    - pacman -Sy extra-cmake-modules --noconfirm --needed
    - mkdir build && cd build
    - cmake -DECM_ENABLE_SANITIZERS='address;leak;undefined'
      -DCMAKE_CXX_COMPILER=clang++ ../
    - make -j$(nproc)
    - make install -j$(nproc)


clang-tidy:
  extends: .clang-tidy
  stage: Compliance 2
  image: ${IMAGE_BASE}
  needs:
    - job: Coverage build
      artifacts: true


.common-test: &common-test
  stage: Test
  image: ${IMAGE_BASE}
  before_script:
    - pacman -Sy breeze-icons --noconfirm --needed

Autotests:
  extends: .tests-with-coverage
  variables:
    GCOVR_ARGS: -e tests
  <<: *common-test
  needs:
    - job: Coverage build
      artifacts: true

Sanitizers:
  extends: .tests
  <<: *common-test
  needs:
    - job: Sanitizers build
      artifacts: true


Add Coverage:
  extends: .add-coverage
  variables:
    COVERAGE_JOB: Autotests
  stage: Integration

pages:
  extends: .pages-coverage
  stage: Integration
  needs:
    - job: Autotests
      artifacts: true

Master image trigger:
  stage: Integration
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - if: '$CI_PROJECT_NAMESPACE == "kwinft" && $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  variables:
    TARGET_ID: 17539846
  script: curl --request POST --form token=${CI_JOB_TOKEN} --form ref=master
            --form "variables[TRIGGER_TYPE]=wrapland_rebuild"
            ${CI_API_V4_URL}/projects/${TARGET_ID}/trigger/pipeline

Stable image trigger:
  stage: Integration
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - if: '$CI_PROJECT_NAMESPACE == "kwinft" && $CI_COMMIT_BRANCH =~ /^Plasma\// && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  variables:
    TARGET_ID: 17539846
  script: curl --request POST --form token=${CI_JOB_TOKEN} --form ref=master
            --form "variables[TRIGGER_TYPE]=wrapland_rebuild"
            --form "variables[PLASMA_VERSION]=${CI_COMMIT_BRANCH}"
            ${CI_API_V4_URL}/projects/${TARGET_ID}/trigger/pipeline

Stable image tag trigger:
  stage: Integration
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - if: '$CI_PROJECT_NAMESPACE == "kwinft" && $CI_COMMIT_TAG =~ /^wrapland@/ && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  variables:
    TARGET_ID: 17539846
  script:
    # Get Plasma version from commit tag.
    - BRANCH_NAME=$(echo "${CI_COMMIT_TAG}" | sed -e 's,wrapland@\(\),\1,g' | sed -e 's,0.\(.\)\([^\.]*\).*,Plasma/\1.\2,g')
    - echo $BRANCH_NAME
    - curl --request POST --form token=${CI_JOB_TOKEN} --form ref=master
            --form "variables[TRIGGER_TYPE]=wrapland_rebuild"
            --form "variables[WRAPLAND_TAG]=${CI_COMMIT_TAG}"
            --form "variables[PLASMA_VERSION]=${BRANCH_NAME}"
            ${CI_API_V4_URL}/projects/${TARGET_ID}/trigger/pipeline
